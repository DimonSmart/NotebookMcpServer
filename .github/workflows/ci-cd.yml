name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  build-and-test:
    runs-on: windows-latest
    name: Build and Test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release

    - name: Pack
      run: dotnet pack --no-build --configuration Release --output ./artifacts

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: "**/TestResults/*.trx"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts

  publish-nuget-package:
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    needs: build-and-test
    runs-on: windows-latest
    name: Publish NuGet Package
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Pack NuGet package
      run: dotnet pack src/NotebookMcpServer/NotebookMcpServer.csproj --configuration Release --output ./package

    - name: Upload NuGet package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./package/*.nupkg

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-and-test, publish-nuget-package]
    runs-on: windows-latest
    name: Create GitHub Release
    
    steps:
    - uses: actions/checkout@v4

    - name: Download NuGet package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: ./package

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./package/*.nupkg
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
